'''
题目：求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、
10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出
任意非负整数区间中1出现的次数。
'''

'''
思路1：例：对于824883294，先求0－800000000之间（不包括800000000）的，再求0－24883294之间的。
如果等于1，如1244444，先求0－1000000之间，再求1000000－1244444，那么只需要加上244444＋1，再求0－244444
之间的1如果大于1，例：0－800000000之间1的个数为8个100000000的1的个数加上100000000，因为从1000000000－
200000000共有1000000000个数且最高位都为1。对于最后一位数，如果大于1，直接加上1即可。

思路2：将1-n全部转换为字符串，只需要统计每个字符串中'1'出现的次数并相加即可
47ms
5504k
'''

def countDigitOne(self, n):
    result = 0
    if n < 0:
        return 0
        length = len(str(n))
        listN = list(str(n))
    for i, v in enumerate(listN):
        a = length - i - 1  # a为10的幂
        if i == length - 1 and int(v) >= 1:
            result += 1
            break
        if int(v) > 1:
            result += int(10 ** a * a / 10) * int(v) + 10 ** a
            if int(v) == 1:
                result += (int(10 ** a * a / 10) + int("".join(listN[i + 1:])) + 1)
    return result

# -*- coding:utf-8 -*-
class Solution:
    def NumberOf1Between1AndN_Solution(self, n):
        # write code here
        count = 0
        for i in range(1,n+1):
            for i in str(i):
                if i == '1':
                    count += 1
        return count

    
# my solution
'''
设N = abcde ,其中abcde分别为十进制中各位上的数字。
如果要计算百位上1出现的次数，它要受到3方面的影响：百位上的数字，百位以下（低位）的数字，百位以上（高位）的数字。
1 如果百位上数字为0，百位上可能出现1的次数由更高位决定。比如：12013，则可以知道百位出现1的情况可能是：100~199，1100~1199,2100~2199，，...，11100~11199，一共1200个。可以看出是由更高位数字（12）决定，并且等于更高位数字（12）乘以 当前位数（100）。
2 如果百位上数字为1，百位上可能出现1的次数不仅受更高位影响还受低位影响。比如：12113，则可以知道百位受高位影响出现的情况是：100~199，1100~1199,2100~2199，，....，11100~11199，一共1200个。和上面情况一样，并且等于更高位数字（12）乘以 当前位数（100）。但同时它还受低位影响，百位出现1的情况是：12100~12113,一共114个，等于低位数字（113）+1。
3 如果百位上数字大于1（2~9），则百位上出现1的情况仅由更高位决定，比如12213，则百位出现1的情况是：100~199,1100~1199，2100~2199，...，11100~11199,12100~12199,一共有1300个，并且等于更高位数字+1（12+1）乘以当前位数（100）。
'''
class Solution:
    def NumberOf1Between1AndN_Solution(self, n):
        # write code here
        count = 0
        teg = 1
        while (n/teg):
            current = (n / teg) % 10  
            before = n / (teg * 10)
            after = n % teg
            
            if current == 0:
                count += before * teg
            elif current ==1:
                count += before * teg + after +1
            else:
                count += (before + 1) * teg
            teg *= 10
        return count
